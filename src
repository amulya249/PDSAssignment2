pip install islp

#splitting the values and the units into different columns

import pandas as pd
import numpy as np
from sklearn.impute import SimpleImputer
data = pd.read_csv('train.csv')
data['New_Price'] = data['New_Price'].astype(str)
# Create new columns for lakhs and crores
data['In_Lakhs'] = data['New_Price'].apply(lambda x: float(x.split()[0]) if 'Lakh' in x else (float(x.split()[0]) if 'Cr' in x else None))  # spliting the values and units in different columns
data['Units'] = data['New_Price'].apply(lambda x: 'Lakh' if 'Lakh' in x else ('Cr' if 'Cr' in x else None))


data['New'] = np.where(data['Units'] == 'Lakh', data['In_Lakhs'] * 1, data['In_Lakhs'])  #converting crores into lakhs and storing in new column
data['New'] = np.where(data['Units'] == 'Cr', data['New'] * 100, data['New'])
#data['New_Prices'] = data['In_Lakhs'].where(data['Units'] == 'Lakh', data['In_Lakhs'] * 100)
#updated records
data_sorted = data.sort_values(by='New', ascending=False)
print(data_sorted)
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
a) Look for the missing values in all the columns and either impute them (replace with mean, median, or mode) or drop them. Justify your action for this task
Answer:

print(data.isnull().sum())
for column in data.columns:
    if data[column].isnull().sum() > 0:  # if there are missing values
        if data[column].dtype == 'object':  # for categorical
            mode_value = data[column].mode()[0]
            data[column].fillna(mode_value, inplace=True) #replace with mode
        else:  # for numerical column
            mean_value = data[column].mean()
            data[column].fillna(mean_value, inplace=True) #Replace with mean
print(data.isnull().sum())
print(data)

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
b) Remove the units from some of the attributes and only keep the numerical values (for example remove kmpl from “Mileage”, CC from “Engine”, bhp from “Power”, and lakh from “New_price”).
Answer:

data['Mileage'] = data['Mileage'].astype(str)
data['Engine'] = data['Engine'].astype(str)
data['Power'] = data['Power'].astype(str)
data['New_Price']=data['New_Price'].astype(str)

def fun(column_name, unit):
    data[column_name] = data[column_name].str.replace(unit + r'\s*', '', case=False, regex=True)
    data[column_name] = pd.to_numeric(data[column_name], errors='coerce')
    return data[column_name]

data['Mileage'] = fun('Mileage', 'kmpl|km/kg')  
data['Engine'] = fun('Engine', 'CC')
data['Power'] = fun('Power', 'bhp')
data['New_Price']=fun('New_Price', 'lakh')

print(data.info())
print(data.head(5))
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
C) Change the categorical variables (“Fuel_Type” and “Transmission”) into numerical one hot encoded value.
Answer:

data1 = pd.get_dummies(data, columns=['Fuel_Type', 'Transmission'])
print(data1.head(10))
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
d) Create one more feature and add this column to the dataset (you can use mutate function in R for this). For example, you can calculate the current age of the car by subtracting “Year” value from the current year.
Answer:

# let the year be 2024
year = 2024
#creating a new column for the calculated age
data['new_age'] = year - data['Year']
print(data)
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
e) Perform select, filter, rename, mutate, arrange and summarize with group by operations (or their equivalent operations in python) on this dataset.
Answer:

#select
selectquery_data = data[['Name', 'Year', 'Price']]
print(selectquery_data)

#filter
filterquery_data = data[(data['Year'] > 2016) & (data['Fuel_Type'] == 'Diesel')]
print(filterquery_data)

#rename
data = data.rename(columns={'Kilometers_Driven': 'KMs_Driven'})
print(data)

#mutate
data['CarAge'] = 2020 - data['Year']
print(data)

#arrange
arrangequery = data.sort_values(by='Price', ascending=False)
print(arrangequery)

#Summarize
summaryquery = data.groupby('Fuel_Type').agg(Average_Price=('Price', 'mean'), Average_Age=('new_age', 'mean')).reset_index()
print(summaryquery)
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
